{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","TextField","name","value","label","placeholder","required","customValidation","onChange","useState","Math","random","toFixed","slice","id","isValidUrl","setIsValidUrl","touched","setTouched","hasError","htmlFor","type","classNames","event","newValue","target","isValid","test","onBlur","initialValue","NewMovie","onAdd","values","setValues","count","setCount","isBtnDisabled","trim","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setMovies","newMovie","ReactDOM","render","document","getElementById"],"mappings":"kSAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,uBCIrCC,EAAU,uKAQT,IAAMC,EAA6B,SAAC,GAQpC,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,MAMI,IALJC,aAKI,MALIF,EAKJ,MAJJG,mBAII,sBAJmBD,GAInB,MAHJE,gBAGI,aAFJC,wBAEI,aADJC,gBACI,MADO,WAAQ,EACf,EAEJ,EAAaC,oBAAS,2BAASP,EAAT,YAffQ,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAaa,IAAfC,EAAP,oBACA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KAGA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACMC,EAAWF,GAAWX,IAAaH,IAAUY,EAWnD,OACE,sBAAK3B,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQgC,QAASN,EAAlC,SACGV,IAGH,qBAAKhB,UAAU,UAAf,SACE,uBACEiC,KAAK,OACLP,GAAIA,EACJ,0BAAkBZ,GAClBd,UAAWkC,IAAW,QAAS,CAC7B,YAAaH,IAEfd,YAAaA,EACbF,MAAOA,EACPK,SAzBkB,SAACe,GACzB,IAAMC,EAAWD,EAAME,OAAOtB,MAExBuB,EAAU1B,EAAQ2B,KAAKH,GAE7BR,EAAcU,GACdlB,EAASgB,EACV,EAmBOI,OAAQ,kBAAMV,GAAW,EAAjB,MAIXC,GACC,mBAAG/B,UAAU,iBAAb,mBAAkCgB,EAAlC,kBAGDG,IAAqBQ,GACpB,mBAAG3B,UAAU,iBAAb,2BAA0CgB,OAIjD,ECtEKyB,EAAe,CACnBrC,MAAO,GACPC,YAAa,GACbH,OAAQ,GACRS,OAAQ,GACRJ,QAAS,IAGEmC,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,EAA4BtB,mBAASoB,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEEzC,EAKEwC,EALFxC,MACAC,EAIEuC,EAJFvC,YACAH,EAGE0C,EAHF1C,OACAS,EAEEiC,EAFFjC,OACAJ,EACEqC,EADFrC,QAGF,EAA0Bc,mBAAS,GAAnC,mBAAOyB,EAAP,KAAcC,EAAd,KAuBMC,EACJ5C,EAAM6C,QACHtC,EAAOsC,QACP1C,EAAQ0C,QACR/C,EAAO+C,OAGZ,OACE,uBACEjD,UAAU,WAEVkD,SA5BiB,SAACf,GACpBA,EAAMgB,iBAUNR,EARwB,CACtBvC,QACAC,cACAM,SACAJ,UACAL,WAIF6C,GAAS,SAAAK,GAAS,OAAIA,EAAY,CAAhB,IAflBP,EAAUJ,EAkBX,EAUC,UAKE,oBAAIzC,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEc,KAAK,QACLE,MAAM,QACND,MAAOX,EACPgB,SAAU,SAACgB,GAAD,OAAcS,EAAU,2BAAKD,GAAN,IAAcxC,MAAOgC,IAA5C,EACVlB,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,cACLE,MAAM,cACND,MAAOV,EACPe,SAAU,SAACgB,GAAD,OAAcS,EAAU,2BAAKD,GAAN,IAAcvC,YAAa+B,IAAlD,IAGZ,cAAC,EAAD,CACEtB,KAAK,SACLE,MAAM,YACND,MAAOb,EACPkB,SAAU,SAACgB,GAAD,OAAcS,EAAU,2BAAKD,GAAN,IAAc1C,OAAQkC,IAA7C,EACVlB,UAAQ,EACRC,kBAAgB,IAGlB,cAAC,EAAD,CACEL,KAAK,UACLE,MAAM,WACND,MAAOR,EACPa,SAAU,SAACgB,GAAD,OAAcS,EAAU,2BAAKD,GAAN,IAAcrC,QAAS6B,IAA9C,EACVlB,UAAQ,EACRC,kBAAgB,IAGlB,cAAC,EAAD,CACEL,KAAK,SACLE,MAAM,UACND,MAAOJ,EACPS,SAAU,SAACgB,GAAD,OAAcS,EAAU,2BAAKD,GAAN,IAAcjC,OAAQyB,IAA7C,EACVlB,UAAQ,IAGV,qBAAKlB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEiC,KAAK,SACL,UAAQ,gBACRjC,UAAU,iBACVqD,UAAWL,EAJb,uBAhDCF,EA4DV,E,OChHYQ,EAAM,WACjB,MAA4BjC,mBAASkC,GAArC,mBAAO9C,EAAP,KAAe+C,EAAf,KAMA,OACE,sBAAKxD,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAEtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAU2C,MAVF,SAACc,GACbD,EAAU,GAAD,mBAAK/C,GAAL,CAAagD,IACvB,QAYF,ECpBDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.97956a69.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  customValidation?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars, max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  customValidation = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [isValidUrl, setIsValidUrl] = useState(true);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value && !isValidUrl;\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    // Check if the input value matches the URL pattern\n    const isValid = pattern.test(newValue);\n\n    setIsValidUrl(isValid);\n    onChange(newValue);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleInputChange}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {customValidation && !isValidUrl && (\n        <p className=\"help is-danger\">{`Invalid ${label}`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst initialValue = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbId: '',\n  imdbUrl: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [values, setValues] = useState(initialValue);\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbId,\n    imdbUrl,\n  } = values;\n\n  const [count, setCount] = useState(0);\n\n  const reset = () => {\n    setValues(initialValue);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newMovie: Movie = {\n      title,\n      description,\n      imdbId,\n      imdbUrl,\n      imgUrl,\n    };\n\n    onAdd(newMovie);\n    setCount(prevCount => prevCount + 1);\n\n    reset();\n  };\n\n  const isBtnDisabled = (\n    title.trim()\n    && imdbId.trim()\n    && imdbUrl.trim()\n    && imgUrl.trim()\n  );\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(newValue) => setValues({ ...values, title: newValue })}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newValue) => setValues({ ...values, description: newValue })}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(newValue) => setValues({ ...values, imgUrl: newValue })}\n        required\n        customValidation\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(newValue) => setValues({ ...values, imdbUrl: newValue })}\n        required\n        customValidation\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(newValue) => setValues({ ...values, imdbId: newValue })}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isBtnDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const onAdd = (newMovie: Movie) => {\n    setMovies([...movies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}